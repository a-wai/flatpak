From fd7601423f90c18f6d3ad9400eff36f8961823b8 Mon Sep 17 00:00:00 2001
From: Arnaud Ferraris <arnaud.ferraris@collabora.com>
Date: Wed, 10 Mar 2021 17:38:03 +0100
Subject: [PATCH 15/26] common: dir: take sign-verify options into account

A number of checks are performed in `flatpak-dir.c` to allow (or not)
pulling from a remote based on the GPG verification status. This commits
expands those to also check for ED25519 signatures, and only require one
of those 2 types of signature.

Some of those checks are bypassed when GPG support is disabled in order
to allow pulling from public repositories such as flathub. This is a
transitional measure, and those checks will be fully restored once those
repos add ED25519 signatures.
---
 common/flatpak-dir.c | 134 ++++++++++++++++++++++++++++++-------------
 1 file changed, 93 insertions(+), 41 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index aa722404..c3bda980 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -3672,10 +3672,10 @@ flatpak_dir_migrate_config (FlatpakDir   *self,
     {
       g_autofree char *remote_collection_id = NULL;
       const char *remote = remotes[i];
-#ifndef FLATPAK_DISABLE_GPG
       gboolean gpg_verify_summary;
       gboolean gpg_verify;
-#endif
+      gboolean sign_verify_summary;
+      gboolean sign_verify;
 
       if (flatpak_dir_get_remote_disabled (self, remote))
         continue;
@@ -3684,7 +3684,6 @@ flatpak_dir_migrate_config (FlatpakDir   *self,
       if (remote_collection_id == NULL)
         continue;
 
-#ifndef FLATPAK_DISABLE_GPG
       if (!ostree_repo_remote_get_gpg_verify_summary (self->repo, remote, &gpg_verify_summary, NULL))
         continue;
 
@@ -3700,7 +3699,22 @@ flatpak_dir_migrate_config (FlatpakDir   *self,
           g_debug ("Migrating remote '%s' to gpg-verify-summary", remote);
           g_key_file_set_boolean (config, group, "gpg-verify-summary", TRUE);
         }
-#endif
+
+      if (!flatpak_dir_get_sign_verify_summary (self->repo, remote, &sign_verify_summary, NULL))
+        continue;
+
+      if (!flatpak_dir_get_sign_verify (self->repo, remote, &sign_verify, NULL))
+        continue;
+
+      if (sign_verify && !sign_verify_summary)
+        {
+          g_autofree char *group = g_strdup_printf ("remote \"%s\"", remote);
+          if (config == NULL)
+            config = ostree_repo_copy_config (flatpak_dir_get_repo (self));
+
+          g_debug ("Migrating remote '%s' to sign-verify-summary", remote);
+          g_key_file_set_boolean (config, group, "sign-verify-summary", TRUE);
+        }
     }
 
   if (config != NULL)
@@ -4930,10 +4944,10 @@ flatpak_dir_update_appstream (FlatpakDir          *self,
       g_autofree char *url = NULL;
       g_autoptr(GFile) child_repo_file = NULL;
       g_autofree char *child_repo_path = NULL;
-#ifndef FLATPAK_DISABLE_GPG
       gboolean gpg_verify_summary;
       gboolean gpg_verify;
-#endif
+      gboolean sign_verify_summary;
+      gboolean sign_verify;
 
       if (!ostree_repo_remote_get_url (self->repo,
                                        state->remote_name,
@@ -4941,7 +4955,6 @@ flatpak_dir_update_appstream (FlatpakDir          *self,
                                        error))
         return FALSE;
 
-#ifndef FLATPAK_DISABLE_GPG
       if (!ostree_repo_remote_get_gpg_verify_summary (self->repo, state->remote_name,
                                                       &gpg_verify_summary, error))
         return FALSE;
@@ -4949,7 +4962,14 @@ flatpak_dir_update_appstream (FlatpakDir          *self,
       if (!ostree_repo_remote_get_gpg_verify (self->repo, state->remote_name,
                                               &gpg_verify, error))
         return FALSE;
-#endif
+
+      if (!flatpak_dir_get_sign_verify_summary (self->repo, state->remote_name,
+                                                &sign_verify_summary, error))
+        return FALSE;
+
+      if (!flatpak_dir_get_sign_verify (self->repo, state->remote_name,
+                                        &sign_verify, error))
+        return FALSE;
 
       if (is_oci)
         {
@@ -4962,16 +4982,16 @@ flatpak_dir_update_appstream (FlatpakDir          *self,
            */
         }
 #ifndef FLATPAK_DISABLE_GPG
-      else if (!gpg_verify_summary || !gpg_verify)
+      else if ((!gpg_verify_summary || !gpg_verify) && (!sign_verify_summary || !sign_verify))
         {
-          /* The remote is not gpg verified, so we don't want to allow installation via
+          /* The remote is not verified, so we don't want to allow installation via
              a download in the home directory, as there is no way to verify you're not
              injecting anything into the remote. However, in the case of a remote
              configured to a local filesystem we can just let the system helper do
              the installation, as it can then avoid network i/o and be certain the
              data comes from the right place.  */
           if (!g_str_has_prefix (url, "file:"))
-            return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-gpg verified remote"));
+            return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-verified remote"));
         }
 #endif
       else
@@ -5900,6 +5920,8 @@ repo_pull_local_untrusted (FlatpakDir          *self,
                            const char         **dirs_to_pull,
                            const char          *ref,
                            const char          *checksum,
+                           gboolean             gpg_verify,
+                           gboolean             verify,
                            FlatpakProgress     *progress,
                            GCancellable        *cancellable,
                            GError             **error)
@@ -5931,15 +5953,17 @@ repo_pull_local_untrusted (FlatpakDir          *self,
                          g_variant_new_variant (g_variant_new_int32 (flags)));
   g_variant_builder_add (&builder, "{s@v}", "override-remote-name",
                          g_variant_new_variant (g_variant_new_string (remote_name)));
-#ifndef FLATPAK_DISABLE_GPG
   g_variant_builder_add (&builder, "{s@v}", "gpg-verify",
-                         g_variant_new_variant (g_variant_new_boolean (TRUE)));
-#else
-  g_variant_builder_add (&builder, "{s@v}", "gpg-verify",
-                         g_variant_new_variant (g_variant_new_boolean (FALSE)));
-#endif
+                         g_variant_new_variant (g_variant_new_boolean (gpg_verify)));
   g_variant_builder_add (&builder, "{s@v}", "gpg-verify-summary",
                          g_variant_new_variant (g_variant_new_boolean (FALSE)));
+  if (!verify)
+    {
+      g_variant_builder_add (&builder, "{s@v}", "disable-sign-verify",
+                             g_variant_new_variant (g_variant_new_boolean (TRUE)));
+    }
+  g_variant_builder_add (&builder, "{s@v}", "disable-sign-verify-summary",
+                         g_variant_new_variant (g_variant_new_boolean (TRUE)));
   g_variant_builder_add (&builder, "{s@v}", "inherit-transaction",
                          g_variant_new_variant (g_variant_new_boolean (TRUE)));
   g_variant_builder_add (&builder, "{s@v}", "update-frequency",
@@ -5978,10 +6002,10 @@ flatpak_dir_pull_untrusted_local (FlatpakDir          *self,
   g_autofree char *url = g_file_get_uri (path_file);
   g_autofree char *checksum = NULL;
   g_autofree char *current_checksum = NULL;
-#ifndef FLATPAK_DISABLE_GPG
   gboolean gpg_verify_summary;
   gboolean gpg_verify;
-#endif
+  gboolean sign_verify_summary;
+  gboolean sign_verify;
   g_autoptr(OstreeGpgVerifyResult) gpg_result = NULL;
   g_autoptr(GVariant) old_commit = NULL;
   g_autoptr(OstreeRepo) src_repo = NULL;
@@ -6005,7 +6029,6 @@ flatpak_dir_pull_untrusted_local (FlatpakDir          *self,
   if (!flatpak_dir_repo_lock (self, &lock, LOCK_SH, cancellable, error))
     return FALSE;
 
-#ifndef FLATPAK_DISABLE_GPG
   if (!ostree_repo_remote_get_gpg_verify_summary (self->repo, remote_name,
                                                   &gpg_verify_summary, error))
     return FALSE;
@@ -6014,9 +6037,18 @@ flatpak_dir_pull_untrusted_local (FlatpakDir          *self,
                                           &gpg_verify, error))
     return FALSE;
 
+  if (!flatpak_dir_get_sign_verify_summary (self->repo, remote_name,
+                                            &sign_verify_summary, error))
+    return FALSE;
+
+  if (!flatpak_dir_get_sign_verify (self->repo, remote_name,
+                                    &sign_verify, error))
+    return FALSE;
+
+#ifndef FLATPAK_DISABLE_GPG
   /* This was verified in the client, but lets do it here too */
-  if (!gpg_verify_summary || !gpg_verify)
-    return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-gpg verified remote"));
+  if ((!gpg_verify_summary || !gpg_verify) && (!sign_verify_summary || !sign_verify))
+    return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-verified remote"));
 #endif
 
   if (!flatpak_repo_resolve_rev (self->repo, NULL, remote_name, ref, TRUE,
@@ -6099,7 +6131,7 @@ flatpak_dir_pull_untrusted_local (FlatpakDir          *self,
 
   if (!repo_pull_local_untrusted (self, self->repo, remote_name, url,
                                   subdirs_arg ? (const char **) subdirs_arg->pdata : NULL,
-                                  ref, checksum, progress,
+                                  ref, checksum, gpg_verify, sign_verify, progress,
                                   cancellable, error))
     {
       g_prefix_error (error, _("While pulling %s from remote %s: "), ref, remote_name);
@@ -9098,10 +9130,10 @@ flatpak_dir_install (FlatpakDir          *self,
       g_autofree char *child_repo_path = NULL;
       FlatpakHelperDeployFlags helper_flags = 0;
       g_autofree char *url = NULL;
-#ifndef FLATPAK_DISABLE_GPG
       gboolean gpg_verify_summary;
       gboolean gpg_verify;
-#endif
+      gboolean sign_verify_summary;
+      gboolean sign_verify;
       gboolean is_oci;
       gboolean is_revokefs_pull = FALSE;
 
@@ -9116,7 +9148,6 @@ flatpak_dir_install (FlatpakDir          *self,
                                        error))
         return FALSE;
 
-#ifndef FLATPAK_DISABLE_GPG
       if (!ostree_repo_remote_get_gpg_verify_summary (self->repo, state->remote_name,
                                                       &gpg_verify_summary, error))
         return FALSE;
@@ -9124,7 +9155,14 @@ flatpak_dir_install (FlatpakDir          *self,
       if (!ostree_repo_remote_get_gpg_verify (self->repo, state->remote_name,
                                               &gpg_verify, error))
         return FALSE;
-#endif
+
+      if (!flatpak_dir_get_sign_verify_summary (self->repo, state->remote_name,
+                                                &sign_verify_summary, error))
+        return FALSE;
+
+      if (!flatpak_dir_get_sign_verify (self->repo, state->remote_name,
+                                        &sign_verify, error))
+        return FALSE;
 
       is_oci = flatpak_dir_get_remote_oci (self, state->remote_name);
       if (no_pull)
@@ -9148,9 +9186,9 @@ flatpak_dir_install (FlatpakDir          *self,
             return FALSE;
         }
 #ifndef FLATPAK_DISABLE_GPG
-      else if (!gpg_verify_summary || !gpg_verify)
+      else if ((!gpg_verify_summary || !gpg_verify) && (!sign_verify_summary || !sign_verify))
         {
-          /* The remote is not gpg verified, so we don't want to allow installation via
+          /* The remote is not verified, so we don't want to allow installation via
              a download in the home directory, as there is no way to verify you're not
              injecting anything into the remote. However, in the case of a remote
              configured to a local filesystem we can just let the system helper do
@@ -9159,7 +9197,7 @@ flatpak_dir_install (FlatpakDir          *self,
           if (g_str_has_prefix (url, "file:"))
             helper_flags |= FLATPAK_HELPER_DEPLOY_FLAGS_LOCAL_PULL;
           else
-            return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-gpg verified remote"));
+            return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-verified remote"));
         }
 #endif
       else
@@ -9800,10 +9838,10 @@ flatpak_dir_update (FlatpakDir                           *self,
       g_auto(GLnxLockFile) child_repo_lock = { 0, };
       g_autofree char *child_repo_path = NULL;
       FlatpakHelperDeployFlags helper_flags = 0;
-#ifndef FLATPAK_DISABLE_GPG
       gboolean gpg_verify_summary;
       gboolean gpg_verify;
-#endif
+      gboolean sign_verify_summary;
+      gboolean sign_verify;
       gboolean is_revokefs_pull = FALSE;
 
       if (allow_downgrade)
@@ -9812,7 +9850,6 @@ flatpak_dir_update (FlatpakDir                           *self,
 
       helper_flags = FLATPAK_HELPER_DEPLOY_FLAGS_UPDATE;
 
-#ifndef FLATPAK_DISABLE_GPG
       if (!ostree_repo_remote_get_gpg_verify_summary (self->repo, state->remote_name,
                                                       &gpg_verify_summary, error))
         return FALSE;
@@ -9820,7 +9857,14 @@ flatpak_dir_update (FlatpakDir                           *self,
       if (!ostree_repo_remote_get_gpg_verify (self->repo, state->remote_name,
                                               &gpg_verify, error))
         return FALSE;
-#endif
+
+      if (!flatpak_dir_get_sign_verify_summary (self->repo, state->remote_name,
+                                                &sign_verify_summary, error))
+        return FALSE;
+
+      if (!flatpak_dir_get_sign_verify (self->repo, state->remote_name,
+                                        &sign_verify, error))
+        return FALSE;
 
       if (no_pull)
         {
@@ -9844,9 +9888,9 @@ flatpak_dir_update (FlatpakDir                           *self,
             return FALSE;
         }
 #ifndef FLATPAK_DISABLE_GPG
-      else if (!gpg_verify_summary || !gpg_verify)
+      else if ((!gpg_verify_summary || !gpg_verify) && (!sign_verify_summary || !sign_verify))
         {
-          /* The remote is not gpg verified, so we don't want to allow installation via
+          /* The remote is not verified, so we don't want to allow installation via
              a download in the home directory, as there is no way to verify you're not
              injecting anything into the remote. However, in the case of a remote
              configured to a local filesystem we can just let the system helper do
@@ -9858,7 +9902,7 @@ flatpak_dir_update (FlatpakDir                           *self,
           if (g_str_has_prefix (url, "file:"))
             helper_flags |= FLATPAK_HELPER_DEPLOY_FLAGS_LOCAL_PULL;
           else
-            return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-gpg verified remote"));
+            return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _("Can't pull from untrusted non-verified remote"));
         }
 #endif
       else
@@ -14552,9 +14596,10 @@ flatpak_dir_update_remote_configuration (FlatpakDir   *self,
 
   if (flatpak_dir_use_system_helper (self, NULL))
     {
-#ifndef FLATPAK_DISABLE_GPG
       gboolean gpg_verify_summary;
       gboolean gpg_verify;
+      gboolean sign_verify_summary;
+      gboolean sign_verify;
 
       if (!ostree_repo_remote_get_gpg_verify_summary (self->repo, remote, &gpg_verify_summary, error))
         return FALSE;
@@ -14562,16 +14607,23 @@ flatpak_dir_update_remote_configuration (FlatpakDir   *self,
       if (!ostree_repo_remote_get_gpg_verify (self->repo, remote, &gpg_verify, error))
         return FALSE;
 
-      if (!gpg_verify_summary || !gpg_verify)
+      if (!flatpak_dir_get_sign_verify_summary (self->repo, remote, &sign_verify_summary, error))
+        return FALSE;
+
+      if (!flatpak_dir_get_sign_verify (self->repo, remote, &sign_verify, error))
+        return FALSE;
+
+#ifndef FLATPAK_DISABLE_GPG
+      if ((!gpg_verify_summary || !gpg_verify) && (!sign_verify_summary || !sign_verify))
         {
-          g_debug ("Ignoring automatic updates for system-helper remotes without gpg signatures");
+          g_debug ("Ignoring automatic updates for system-helper remotes without signatures");
           return TRUE;
         }
 
       if ((state->summary != NULL && state->summary_sig_bytes == NULL) ||
           (state->index != NULL && state->index_sig_bytes == NULL))
         {
-          g_debug ("Can't update remote configuration as user, no GPG signature");
+          g_debug ("Can't update remote configuration as user, no signature");
           return TRUE;
         }
 #endif
-- 
2.30.0

