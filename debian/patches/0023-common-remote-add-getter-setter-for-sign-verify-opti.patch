From 8ef4cf6141ae700b97d3f91361e6076db7e8036e Mon Sep 17 00:00:00 2001
From: Arnaud Ferraris <arnaud.ferraris@collabora.com>
Date: Wed, 10 Mar 2021 18:02:48 +0100
Subject: [PATCH 23/26] common: remote: add getter/setter for sign-verify
 option

Similar to `flatpak_remote_{g,s}et_gpg_verify()`, this commit adds the
`flatpak_remote_{g,s}et_sign_verify()` function to allow getting/setting
the signature verification status for a given remote.
---
 common/flatpak-remote.c | 73 +++++++++++++++++++++++++++++++++++++----
 common/flatpak-remote.h |  3 ++
 2 files changed, 70 insertions(+), 6 deletions(-)

diff --git a/common/flatpak-remote.c b/common/flatpak-remote.c
index 42afcc06..94858271 100644
--- a/common/flatpak-remote.c
+++ b/common/flatpak-remote.c
@@ -65,6 +65,7 @@ struct _FlatpakRemotePrivate
   char             *local_main_ref;
   char             *local_filter;
   gboolean          local_gpg_verify;
+  gboolean          local_sign_verify;
   gboolean          local_noenumerate;
   gboolean          local_nodeps;
   gboolean          local_disabled;
@@ -82,6 +83,7 @@ struct _FlatpakRemotePrivate
   guint             local_main_ref_set       : 1;
   guint             local_filter_set         : 1;
   guint             local_gpg_verify_set     : 1;
+  guint             local_sign_verify_set    : 1;
   guint             local_noenumerate_set    : 1;
   guint             local_nodeps_set         : 1;
   guint             local_disabled_set       : 1;
@@ -1037,6 +1039,54 @@ flatpak_remote_new_with_dir (const char *name,
   return self;
 }
 
+/**
+ * flatpak_remote_get_sign_verify:
+ * @self: a #FlatpakRemote
+ *
+ * Returns whether signature verification is enabled for the remote.
+ *
+ * Returns: whether signature verification is enabled
+ */
+gboolean
+flatpak_remote_get_sign_verify (FlatpakRemote *self)
+{
+  FlatpakRemotePrivate *priv = flatpak_remote_get_instance_private (self);
+  gboolean res;
+
+  if (priv->local_sign_verify_set)
+    return priv->local_sign_verify;
+
+  if (priv->dir)
+    {
+      OstreeRepo *repo = flatpak_dir_get_repo (priv->dir);
+      if (flatpak_dir_get_sign_verify(repo, priv->name, &res, NULL))
+        return res;
+    }
+
+  return FALSE;
+}
+
+/**
+ * flatpak_remote_set_sign_verify:
+ * @self: a #FlatpakRemote
+ * @sign_verify: a bool
+ *
+ * Sets the sign_verify config of this remote. See flatpak_remote_get_sign_verify().
+ *
+ * Note: This is a local modification of this object, you must commit changes
+ * using flatpak_installation_modify_remote() for the changes to take
+ * effect.
+ */
+void
+flatpak_remote_set_sign_verify (FlatpakRemote *self,
+                               gboolean       sign_verify)
+{
+  FlatpakRemotePrivate *priv = flatpak_remote_get_instance_private (self);
+
+  priv->local_sign_verify = sign_verify;
+  priv->local_sign_verify_set = TRUE;
+}
+
 /**
  * flatpak_remote_new:
  * @name: a name
@@ -1252,17 +1302,28 @@ flatpak_remote_commit (FlatpakRemote *self,
   if (priv->local_main_ref_set)
     g_key_file_set_string (config, group, "xa.main-ref", priv->local_main_ref);
 
-  if (priv->local_gpg_verify_set)
+  if (priv->local_gpg_verify_set || priv->local_sign_verify_set)
     {
-      if (!priv->local_gpg_verify &&
+      if (!priv->local_gpg_verify && !priv->local_sign_verify &&
            priv->local_collection_id_set && priv->local_collection_id != NULL)
         return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA,
-                                   _("GPG verification must be enabled when a collection ID is set"));
+                                   _("signature verification must be enabled when a collection ID is set"));
+
+      if (priv->local_gpg_verify_set)
+        {
+          g_key_file_set_boolean (config, group, "gpg-verify", priv->local_gpg_verify);
+
+          if (!priv->local_collection_id_set || priv->local_collection_id == NULL)
+            g_key_file_set_boolean (config, group, "gpg-verify-summary", priv->local_gpg_verify);
+        }
 
-      g_key_file_set_boolean (config, group, "gpg-verify", priv->local_gpg_verify);
+      if (priv->local_sign_verify_set)
+        {
+          g_key_file_set_boolean (config, group, "sign-verify", priv->local_sign_verify);
 
-      if (!priv->local_collection_id_set || priv->local_collection_id == NULL)
-        g_key_file_set_boolean (config, group, "gpg-verify-summary", priv->local_gpg_verify);
+          if (!priv->local_collection_id_set || priv->local_collection_id == NULL)
+            g_key_file_set_boolean (config, group, "sign-verify-summary", priv->local_sign_verify);
+        }
     }
 
   if (priv->local_noenumerate_set)
diff --git a/common/flatpak-remote.h b/common/flatpak-remote.h
index fa223d33..53cfa6af 100644
--- a/common/flatpak-remote.h
+++ b/common/flatpak-remote.h
@@ -106,6 +106,9 @@ FLATPAK_EXTERN void          flatpak_remote_set_gpg_verify (FlatpakRemote *self,
                                                             gboolean       gpg_verify);
 FLATPAK_EXTERN void          flatpak_remote_set_gpg_key (FlatpakRemote *self,
                                                          GBytes        *gpg_key);
+FLATPAK_EXTERN gboolean      flatpak_remote_get_sign_verify (FlatpakRemote *self);
+FLATPAK_EXTERN void          flatpak_remote_set_sign_verify (FlatpakRemote *self,
+                                                             gboolean       sign_verify);
 FLATPAK_EXTERN gboolean      flatpak_remote_get_noenumerate (FlatpakRemote *self);
 FLATPAK_EXTERN void          flatpak_remote_set_noenumerate (FlatpakRemote *self,
                                                              gboolean       noenumerate);
-- 
2.30.0

