From a3c8466a1dd6f1c293277c4c0d4514a3d78431d6 Mon Sep 17 00:00:00 2001
From: Arnaud Ferraris <arnaud.ferraris@collabora.com>
Date: Wed, 10 Mar 2021 17:47:36 +0100
Subject: [PATCH 17/26] common: dir: add remote from ref file with alternative
 signature keys

In order to be able to add ED25519-signed repos using flatpakref files,
this commit adds the following ref file keys:
  * `SignatureKey`: specifies the base64-encoded ED25519 public key
  * `SignatureType`: indicates the algorithm to be used for signature
    verification (defaults to `ed25519` if omitted)
---
 common/flatpak-dir-private.h |   3 +
 common/flatpak-dir.c         | 127 +++++++++++++++++++++++++++++++----
 common/flatpak-transaction.c |   1 +
 3 files changed, 118 insertions(+), 13 deletions(-)

diff --git a/common/flatpak-dir-private.h b/common/flatpak-dir-private.h
index 21a47fca..befd0701 100644
--- a/common/flatpak-dir-private.h
+++ b/common/flatpak-dir-private.h
@@ -65,6 +65,8 @@ GType flatpak_deploy_get_type (void);
 #define FLATPAK_REF_SUGGEST_REMOTE_NAME_KEY "SuggestRemoteName"
 #define FLATPAK_REF_TITLE_KEY "Title"
 #define FLATPAK_REF_GPGKEY_KEY "GPGKey"
+#define FLATPAK_REF_SIGNATUREKEY_KEY "SignatureKey"
+#define FLATPAK_REF_SIGNATURETYPE_KEY "SignatureType"
 #define FLATPAK_REF_IS_RUNTIME_KEY "IsRuntime"
 #define FLATPAK_REF_NAME_KEY "Name"
 #define FLATPAK_REF_BRANCH_KEY "Branch"
@@ -848,6 +850,7 @@ char      *           flatpak_dir_create_origin_remote                      (Fla
                                                                              const char                    *title,
                                                                              const char                    *main_ref,
                                                                              GBytes                        *gpg_data,
+                                                                             GVariant                      *sign_data,
                                                                              const char                    *collection_id,
                                                                              gboolean                      *changed_config,
                                                                              GCancellable                  *cancellable,
diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index 373637da..3046cad5 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -9426,6 +9426,7 @@ flatpak_dir_ensure_bundle_remote (FlatpakDir         *self,
                                                  basename,
                                                  flatpak_decomposed_get_ref (ref),
                                                  gpg_data,
+                                                 NULL,
                                                  collection_id,
                                                  &created_remote,
                                                  cancellable,
@@ -13696,6 +13697,7 @@ create_origin_remote_config (OstreeRepo *repo,
                              const char *title,
                              const char *main_ref,
                              gboolean    gpg_verify,
+                             GVariant   *sign_data,
                              const char *collection_id,
                              GKeyFile  **new_config)
 {
@@ -13740,6 +13742,65 @@ create_origin_remote_config (OstreeRepo *repo,
   g_key_file_set_string (*new_config, group, "xa.prio", "0");
   g_key_file_set_string (*new_config, group, "gpg-verify-summary", gpg_verify ? "true" : "false");
   g_key_file_set_string (*new_config, group, "gpg-verify", gpg_verify ? "true" : "false");
+  if (sign_data)
+    {
+      g_autoptr (GPtrArray) verifiers = NULL;
+      g_autoptr (GString) sign_name = NULL;
+      GVariantDict dict;
+
+      g_variant_dict_init (&dict, sign_data);
+      verifiers = ostree_sign_get_all ();
+
+      for (guint i = 0; i < verifiers->len; i++)
+        {
+          g_autoptr (GVariant) keys = NULL;
+          g_autofree gchar *opt = NULL;
+          g_autoptr (GString) key_string = NULL;
+          g_autofree const gchar **keys_array = NULL;
+          OstreeSign *sign = verifiers->pdata[i];
+          gsize len;
+
+          keys = g_variant_dict_lookup_value (&dict, ostree_sign_metadata_key (sign),
+                                              G_VARIANT_TYPE_STRING_ARRAY);
+          if (!keys)
+            continue;
+
+          keys_array = g_variant_get_strv (keys, &len);
+          for (guint j = 0; j < len; j++)
+            {
+              if (!key_string)
+                {
+                  key_string = g_string_new (keys_array[j]);
+                }
+              else
+                {
+                  g_string_append_c (key_string, ',');
+                  g_string_append (key_string, keys_array[j]);
+                }
+            }
+
+          opt = g_strdup_printf ("verification-%s-key", ostree_sign_get_name (sign));
+          g_key_file_set_string (*new_config, group, opt, key_string->str);
+
+          if (!sign_name)
+            {
+              sign_name = g_string_new (ostree_sign_get_name (sign));
+            }
+          else
+            {
+              g_string_append_c (sign_name, ',');
+              g_string_append (sign_name, ostree_sign_get_name (sign));
+            }
+        }
+
+        g_key_file_set_string (*new_config, group, "sign-verify-summary", "true");
+        g_key_file_set_string (*new_config, group, "sign-verify", sign_name->str);
+    }
+  else
+    {
+      g_key_file_set_string (*new_config, group, "sign-verify-summary", "false");
+      g_key_file_set_string (*new_config, group, "sign-verify", "false");
+    }
   if (main_ref)
     g_key_file_set_string (*new_config, group, "xa.main-ref", main_ref);
 
@@ -13756,6 +13817,7 @@ flatpak_dir_create_origin_remote (FlatpakDir   *self,
                                   const char   *title,
                                   const char   *main_ref,
                                   GBytes       *gpg_data,
+                                  GVariant     *sign_data,
                                   const char   *collection_id,
                                   gboolean     *changed_config,
                                   GCancellable *cancellable,
@@ -13764,7 +13826,9 @@ flatpak_dir_create_origin_remote (FlatpakDir   *self,
   g_autoptr(GKeyFile) new_config = NULL;
   g_autofree char *remote = NULL;
 
-  remote = create_origin_remote_config (self->repo, url, id, title, main_ref, gpg_data != NULL, collection_id, &new_config);
+  remote = create_origin_remote_config (self->repo, url, id, title, main_ref,
+                                        gpg_data != NULL, sign_data,
+                                        collection_id, &new_config);
 
   if (new_config &&
       !flatpak_dir_modify_remote (self, remote, new_config,
@@ -13781,15 +13845,16 @@ flatpak_dir_create_origin_remote (FlatpakDir   *self,
 }
 
 static gboolean
-parse_ref_file (GKeyFile *keyfile,
-                char    **name_out,
-                char    **branch_out,
-                char    **url_out,
-                char    **title_out,
-                GBytes  **gpg_data_out,
-                gboolean *is_runtime_out,
-                char    **collection_id_out,
-                GError  **error)
+parse_ref_file (GKeyFile  *keyfile,
+                char     **name_out,
+                char     **branch_out,
+                char     **url_out,
+                char     **title_out,
+                GBytes   **gpg_data_out,
+                GVariant **sign_data_out,
+                gboolean  *is_runtime_out,
+                char     **collection_id_out,
+                GError   **error)
 {
   g_autofree char *url = NULL;
   g_autofree char *title = NULL;
@@ -13797,7 +13862,9 @@ parse_ref_file (GKeyFile *keyfile,
   g_autofree char *branch = NULL;
   g_autofree char *version = NULL;
   g_autoptr(GBytes) gpg_data = NULL;
+  g_autoptr(GVariant) sign_data = NULL;
   gboolean is_runtime = FALSE;
+  g_autofree char *sign_name = NULL;
   g_autofree char *collection_id = NULL;
   g_autofree char *str = NULL;
 
@@ -13841,7 +13908,7 @@ parse_ref_file (GKeyFile *keyfile,
   str = g_key_file_get_string (keyfile, FLATPAK_REF_GROUP,
                                FLATPAK_REF_GPGKEY_KEY, NULL);
 #endif
-  if (str != NULL)
+  if (str != NULL && strlen (str) > 0)
     {
       g_autofree guchar *decoded = NULL;
       gsize decoded_len;
@@ -13854,6 +13921,38 @@ parse_ref_file (GKeyFile *keyfile,
       gpg_data = g_bytes_new_take (g_steal_pointer (&decoded), decoded_len);
     }
 
+  sign_name = g_key_file_get_string (keyfile, FLATPAK_REF_GROUP,
+                                     FLATPAK_REF_SIGNATURETYPE_KEY, NULL);
+  if (sign_name == NULL)
+    sign_name = g_strdup (OSTREE_SIGN_NAME_ED25519);
+
+  str = g_key_file_get_string (keyfile, FLATPAK_REF_GROUP,
+                               FLATPAK_REF_SIGNATUREKEY_KEY, NULL);
+  if (str != NULL && strlen (str) > 0)
+    {
+      g_auto (GVariantDict) dict = FLATPAK_VARIANT_DICT_INITIALIZER;
+      g_autoptr (GVariantBuilder) builder = NULL;
+      g_autofree guchar *decoded = NULL;
+      gsize decoded_len;
+      g_autoptr (OstreeSign) sign = ostree_sign_get_by_name (sign_name, error);
+
+      if (!sign)
+        return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _("Invalid file format, signature type invalid"));
+
+      str = g_strstrip (str);
+      decoded = g_base64_decode (str, &decoded_len);
+      if (decoded_len < 10) /* Check some minimal size so we don't get crap */
+        return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _("Invalid file format, signature key invalid"));
+
+      // Build sign_data GVariant
+      g_variant_dict_init (&dict, NULL);
+      builder = g_variant_builder_new (G_VARIANT_TYPE ("as"));
+      g_variant_builder_add_value (builder, g_variant_new_string (str));
+      g_variant_dict_insert_value (&dict, ostree_sign_metadata_key (sign),
+                                   g_variant_ref_sink (g_variant_builder_end (builder)));
+      sign_data = g_variant_ref_sink (g_variant_dict_end (&dict));
+    }
+
   collection_id = g_key_file_get_string (keyfile, FLATPAK_REF_GROUP,
                                          FLATPAK_REF_DEPLOY_COLLECTION_ID_KEY, NULL);
 
@@ -13877,6 +13976,7 @@ parse_ref_file (GKeyFile *keyfile,
   *title_out = g_steal_pointer (&title);
   *gpg_data_out = g_steal_pointer (&gpg_data);
   *is_runtime_out = is_runtime;
+  *sign_data_out = g_steal_pointer (&sign_data);
   *collection_id_out = g_steal_pointer (&collection_id);
 
   return TRUE;
@@ -13899,10 +13999,11 @@ flatpak_dir_create_remote_for_ref_file (FlatpakDir         *self,
   g_autofree char *remote = NULL;
   gboolean is_runtime = FALSE;
   g_autofree char *collection_id = NULL;
+  g_autoptr(GVariant) sign_data = NULL;
   g_autoptr(GFile) deploy_dir = NULL;
   g_autoptr(FlatpakDecomposed) ref = NULL;
 
-  if (!parse_ref_file (keyfile, &name, &branch, &url, &title, &gpg_data, &is_runtime, &collection_id, error))
+  if (!parse_ref_file (keyfile, &name, &branch, &url, &title, &gpg_data, &sign_data, &is_runtime, &collection_id, error))
     return FALSE;
 
   ref = flatpak_decomposed_new_from_parts (is_runtime ? FLATPAK_KINDS_RUNTIME : FLATPAK_KINDS_APP,
@@ -13926,7 +14027,7 @@ flatpak_dir_create_remote_for_ref_file (FlatpakDir         *self,
   if (remote == NULL)
     {
       remote = flatpak_dir_create_origin_remote (self, url, name, title, flatpak_decomposed_get_ref (ref),
-                                                 gpg_data, collection_id, NULL, NULL, error);
+                                                 gpg_data, sign_data, collection_id, NULL, NULL, error);
       if (remote == NULL)
         return FALSE;
     }
diff --git a/common/flatpak-transaction.c b/common/flatpak-transaction.c
index 19274988..ebfbe6ef 100644
--- a/common/flatpak-transaction.c
+++ b/common/flatpak-transaction.c
@@ -2427,6 +2427,7 @@ flatpak_transaction_add_ref (FlatpakTransaction             *self,
                                                         flatpak_decomposed_get_ref (ref),
                                                         NULL,
                                                         NULL,
+                                                        NULL,
                                                         &changed_config,
                                                         NULL, error);
       if (origin_remote == NULL)
-- 
2.30.0

