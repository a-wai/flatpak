From 1f01cbc54c93bb7dd9d5329733e505e356b1183b Mon Sep 17 00:00:00 2001
From: Arnaud Ferraris <arnaud.ferraris@collabora.com>
Date: Fri, 12 Feb 2021 15:26:57 +0100
Subject: [PATCH 01/26] Allow building without GPG support

This commit allows building flatpak without linking to gpgme. It can
still, though, make use of GPG-related ostree functions, which don't
require direct linking.
---
 Makefile.am                   |  2 ++
 common/Makefile.am.inc        | 15 +++++++++++++--
 common/flatpak-oci-registry.c | 16 ++++++++++++++++
 configure.ac                  | 27 +++++++++++++++++++--------
 4 files changed, 50 insertions(+), 10 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index 3e8a93c1..24598242 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -83,9 +83,11 @@ dist_triggers_SCRIPTS = \
 	triggers/desktop-database.trigger \
 	$(NULL)
 
+if USE_GPGME
 # This canonicalizes the PKG_CHECK_MODULES or AM_PATH_GPGME results
 INTERNAL_GPGME_CFLAGS = $(DEP_GPGME_CFLAGS) $(GPGME_PTHREAD_CFLAGS)
 INTERNAL_GPGME_LIBS = $(DEP_GPGME_LIBS) $(GPGME_PTHREAD_LIBS)
+endif
 
 lib_LTLIBRARIES =
 noinst_LTLIBRARIES += libglnx.la
diff --git a/common/Makefile.am.inc b/common/Makefile.am.inc
index 4844ab54..1290f3d2 100644
--- a/common/Makefile.am.inc
+++ b/common/Makefile.am.inc
@@ -189,7 +189,6 @@ libflatpak_common_la_CFLAGS = \
 	$(BASE_CFLAGS) \
 	$(DCONF_CFLAGS) \
 	$(HIDDEN_VISIBILITY_CFLAGS) \
-	$(INTERNAL_GPGME_CFLAGS) \
 	$(JSON_CFLAGS) \
 	$(LIBSECCOMP_CFLAGS) \
 	$(MALCONTENT_CFLAGS) \
@@ -200,13 +199,19 @@ libflatpak_common_la_CFLAGS = \
 	$(XAUTH_CFLAGS) \
 	$(XML_CFLAGS) \
 	$(NULL)
+
+if USE_GPGME
+libflatpak_common_la_CFLAGS += \
+	$(INTERNAL_GPGME_CFLAGS) \
+	$(NULL)
+endif
+
 libflatpak_common_la_LIBADD = \
 	$(AM_LIBADD) \
 	$(ARCHIVE_LIBS) \
 	$(ZSTD_LIBS) \
 	$(BASE_LIBS) \
 	$(DCONF_LIBS) \
-	$(INTERNAL_GPGME_LIBS) \
 	$(JSON_LIBS) \
 	$(LIBSECCOMP_LIBS) \
 	$(MALCONTENT_LIBS) \
@@ -218,6 +223,12 @@ libflatpak_common_la_LIBADD = \
 	$(XML_LIBS) \
 	$(NULL)
 
+if USE_GPGME
+libflatpak_common_la_LIBADD += \
+	$(INTERNAL_GPGME_LIBS) \
+	$(NULL)
+endif
+
 
 libflatpak_la_SOURCES = \
 	common/flatpak.c \
diff --git a/common/flatpak-oci-registry.c b/common/flatpak-oci-registry.c
index 6aa68c27..42c3c0d6 100644
--- a/common/flatpak-oci-registry.c
+++ b/common/flatpak-oci-registry.c
@@ -26,7 +26,9 @@
 
 #include "libglnx.h"
 
+#ifndef FLATPAK_DISABLE_GPG
 #include <gpgme.h>
+#endif
 #include <libsoup/soup.h>
 #include "flatpak-oci-registry-private.h"
 #include "flatpak-utils-base-private.h"
@@ -2095,6 +2097,7 @@ flatpak_oci_registry_find_delta_manifest (FlatpakOciRegistry    *registry,
   return NULL;
 }
 
+#ifndef FLATPAK_DISABLE_GPG
 G_DEFINE_AUTO_CLEANUP_FREE_FUNC (gpgme_data_t, gpgme_data_release, NULL)
 G_DEFINE_AUTO_CLEANUP_FREE_FUNC (gpgme_ctx_t, gpgme_release, NULL)
 G_DEFINE_AUTO_CLEANUP_FREE_FUNC (gpgme_key_t, gpgme_key_unref, NULL)
@@ -2415,6 +2418,7 @@ flatpak_gpgme_new_ctx (const char *homedir,
 
   return g_steal_pointer (&context);
 }
+#endif
 
 GBytes *
 flatpak_oci_sign_data (GBytes       *data,
@@ -2422,6 +2426,7 @@ flatpak_oci_sign_data (GBytes       *data,
                        const char   *homedir,
                        GError      **error)
 {
+#ifndef FLATPAK_DISABLE_GPG
   g_auto(GLnxTmpfile) tmpf = { 0 };
   g_autoptr(GOutputStream) tmp_signature_output = NULL;
   g_auto(gpgme_ctx_t) context = NULL;
@@ -2499,8 +2504,13 @@ flatpak_oci_sign_data (GBytes       *data,
     return NULL;
 
   return g_mapped_file_get_bytes (signature_file);
+#else
+  flatpak_fail (error, "GPG signature unsupported");
+  return NULL;
+#endif
 }
 
+#ifndef FLATPAK_DISABLE_GPG
 static gboolean
 signature_is_valid (gpgme_signature_t signature)
 {
@@ -2591,6 +2601,7 @@ flatpak_gpgme_ctx_tmp_home_dir (gpgme_ctx_t   gpgme_ctx,
 
   return TRUE;
 }
+#endif
 
 FlatpakOciSignature *
 flatpak_oci_verify_signature (OstreeRepo *repo,
@@ -2598,6 +2609,7 @@ flatpak_oci_verify_signature (OstreeRepo *repo,
                               GBytes     *signed_data,
                               GError    **error)
 {
+#ifndef FLATPAK_DISABLE_GPG
   gpgme_ctx_t context;
   gpgme_error_t gpg_error;
   g_auto(gpgme_data_t) signed_data_buffer = NULL;
@@ -2673,6 +2685,10 @@ flatpak_oci_verify_signature (OstreeRepo *repo,
     return FALSE;
 
   return (FlatpakOciSignature *) g_steal_pointer (&json);
+#else
+  flatpak_fail (error, "GPG signature unsupported");
+  return NULL;
+#endif
 }
 
 static const char *
diff --git a/configure.ac b/configure.ac
index dc1561fa..31a970f2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -260,14 +260,24 @@ AC_CHECK_FUNCS(archive_read_support_filter_all)
 LIBS=$save_LIBS
 
 LIBGPGME_DEPENDENCY="1.1.8"
-PKG_CHECK_MODULES(DEP_GPGME, gpgme-pthread >= $LIBGPGME_DEPENDENCY, have_gpgme=yes, [
-    m4_ifdef([AM_PATH_GPGME_PTHREAD], [
-       AM_PATH_GPGME_PTHREAD($LIBGPGME_DEPENDENCY, have_gpgme=yes, have_gpgme=no)
-    ],[ have_gpgme=no ])
-])
-AS_IF([ test x$have_gpgme = xno ], [
-   AC_MSG_ERROR([Need GPGME_PTHREAD version $LIBGPGME_DEPENDENCY or later])
-])
+AC_ARG_WITH(gpg,
+            AS_HELP_STRING([--with-gpg], [Enable gpg support using gpgme @<:@default=yes@:>@]),
+            [], [with_gpg=yes])
+AS_IF([test x$with_gpg != xno], [
+    PKG_CHECK_MODULES(DEP_GPGME, gpgme-pthread >= $LIBGPGME_DEPENDENCY, have_gpg=yes, [
+        m4_ifdef([AM_PATH_GPGME_PTHREAD], [
+           AM_PATH_GPGME_PTHREAD($LIBGPGME_DEPENDENCY, have_gpg=yes, have_gpg=no)
+        ],[ have_gpg=no ])
+    ])
+    AS_IF([ test x$have_gpg = xno ], [
+       AC_MSG_ERROR([Need GPGME_PTHREAD version $LIBGPGME_DEPENDENCY or later])
+    ])
+    ], [
+    AC_DEFINE([FLATPAK_DISABLE_GPG], 1, [Define to disable GPG support])
+    have_gpg=no
+    ]
+)
+AM_CONDITIONAL(USE_GPGME, test "x$have_gpg" = xyes)
 
 AC_ARG_ENABLE(selinux-module,
         [AS_HELP_STRING([--enable-selinux-module],[Enable selinux module for system-helper])],
@@ -605,6 +615,7 @@ echo "          Use seccomp:            $enable_seccomp"
 echo "          Privileged group:       $PRIVILEGED_GROUP"
 echo "          Privilege mode:         $with_priv_mode"
 echo "          Use dconf:              $have_dconf"
+echo "          Use gpg:                $have_gpg"
 echo "          Use libsystemd:         $have_libsystemd"
 echo "          Use libmalcontent:      $have_libmalcontent"
 echo "          Use libzstd:            $have_zstd"
-- 
2.30.0

