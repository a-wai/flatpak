From f655d497c935cbe22a116f01be5cfcc4a9323263 Mon Sep 17 00:00:00 2001
From: Arnaud Ferraris <arnaud.ferraris@collabora.com>
Date: Wed, 10 Mar 2021 17:49:00 +0100
Subject: [PATCH 18/26] common: utils: add remote from repo file with
 alternative signature keys

In a similar way to what has been done for ref files, this commit
handles `SignatureKey` and `SignatureType` config keys for flatpakrepo
files.
---
 common/flatpak-dir-private.h |  2 ++
 common/flatpak-utils.c       | 46 +++++++++++++++++++++++++++++++-----
 2 files changed, 42 insertions(+), 6 deletions(-)

diff --git a/common/flatpak-dir-private.h b/common/flatpak-dir-private.h
index befd0701..bbd4be82 100644
--- a/common/flatpak-dir-private.h
+++ b/common/flatpak-dir-private.h
@@ -80,6 +80,8 @@ GType flatpak_deploy_get_type (void);
 #define FLATPAK_REPO_TITLE_KEY "Title"
 #define FLATPAK_REPO_DEFAULT_BRANCH_KEY "DefaultBranch"
 #define FLATPAK_REPO_GPGKEY_KEY "GPGKey"
+#define FLATPAK_REPO_SIGNATUREKEY_KEY "SignatureKey"
+#define FLATPAK_REPO_SIGNATURETYPE_KEY "SignatureType"
 #define FLATPAK_REPO_NODEPS_KEY "NoDeps"
 #define FLATPAK_REPO_COMMENT_KEY "Comment"
 #define FLATPAK_REPO_DESCRIPTION_KEY "Description"
diff --git a/common/flatpak-utils.c b/common/flatpak-utils.c
index 602fd223..c402a8e1 100644
--- a/common/flatpak-utils.c
+++ b/common/flatpak-utils.c
@@ -2206,6 +2206,7 @@ flatpak_parse_repofile (const char   *remote_name,
   g_autofree char *uri = NULL;
   g_autofree char *title = NULL;
   g_autofree char *gpg_key = NULL;
+  g_autofree char *sign_key = NULL;
   g_autofree char *collection_id = NULL;
   g_autofree char *default_branch = NULL;
   g_autofree char *comment = NULL;
@@ -2278,7 +2279,7 @@ flatpak_parse_repofile (const char   *remote_name,
   gpg_key = g_key_file_get_string (keyfile, source_group,
                                    FLATPAK_REPO_GPGKEY_KEY, NULL);
 #endif
-  if (gpg_key != NULL)
+  if (gpg_key != NULL && strlen (gpg_key) > 0)
     {
       guchar *decoded;
       gsize decoded_len;
@@ -2299,6 +2300,42 @@ flatpak_parse_repofile (const char   *remote_name,
       g_key_file_set_boolean (config, group, "gpg-verify", FALSE);
     }
 
+  g_key_file_set_boolean (config, group, "gpg-verify-summary",
+                          (gpg_key != NULL) && strlen (gpg_key) > 0);
+
+  sign_key = g_key_file_get_string (keyfile, source_group,
+                                   FLATPAK_REPO_SIGNATUREKEY_KEY, NULL);
+  if (sign_key != NULL && strlen (sign_key) > 0)
+    {
+      g_autofree guchar *decoded = NULL;
+      g_autofree gchar *sign_type = NULL;
+      g_autofree gchar *sign_optkey = NULL;
+      gsize decoded_len;
+
+      sign_type = g_key_file_get_string (keyfile, source_group,
+                                         FLATPAK_REPO_SIGNATURETYPE_KEY, NULL);
+      sign_type = sign_type ?: g_strdup (OSTREE_SIGN_NAME_ED25519);
+      sign_optkey = g_strdup_printf ("verification-%s-key", sign_type);
+
+      sign_key = g_strstrip (sign_key);
+      decoded = g_base64_decode (sign_key, &decoded_len);
+      if (decoded_len < 10) /* Check some minimal size so we don't get crap */
+        {
+          flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _("Invalid signature key"));
+          return NULL;
+        }
+
+      g_key_file_set_string (config, group, "sign-verify", sign_type);
+      g_key_file_set_string (config, group, sign_optkey, sign_key);
+    }
+  else
+    {
+      g_key_file_set_boolean (config, group, "sign-verify", FALSE);
+    }
+
+  g_key_file_set_boolean (config, group, "sign-verify-summary",
+                          (sign_key != NULL) && strlen (sign_key) > 0);
+
   collection_id = g_key_file_get_string (keyfile, source_group,
                                          FLATPAK_REPO_DEPLOY_COLLECTION_ID_KEY, NULL);
   if (collection_id == NULL || *collection_id == '\0')
@@ -2307,9 +2344,9 @@ flatpak_parse_repofile (const char   *remote_name,
   if (collection_id != NULL)
     {
 #ifndef FLATPAK_DISABLE_GPG
-      if (gpg_key == NULL)
+      if (gpg_key == NULL && sign_key == NULL)
         {
-          flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _("Collection ID requires GPG key to be provided"));
+          flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _("Collection ID requires signature key to be provided"));
           return NULL;
         }
 #endif
@@ -2317,9 +2354,6 @@ flatpak_parse_repofile (const char   *remote_name,
       g_key_file_set_string (config, group, "collection-id", collection_id);
     }
 
-  g_key_file_set_boolean (config, group, "gpg-verify-summary",
-                          (gpg_key != NULL));
-
   authenticator_name = g_key_file_get_string (keyfile, FLATPAK_REPO_GROUP,
                                               FLATPAK_REPO_AUTHENTICATOR_NAME_KEY, NULL);
   if (authenticator_name)
-- 
2.30.0

